---
- name: Check nodes & network usage
  ansible.builtin.import_tasks: input_precheck.yml
- name: Check host precheck
  ansible.builtin.import_tasks: host_precheck.yml
- name: Get timezone
  ansible.builtin.import_tasks: defaults-get.yml
- name: Check LVM related stuff
  ansible.builtin.import_tasks: lvm_storage.yml

- name: Generate SSH key
  ansible.builtin.import_role:
    name: common
    tasks_from: ssh_key

- name: Define cluster_networks
  ansible.builtin.import_tasks: define_cluster_networks.yml

- name: Define cluster_nodes
  ansible.builtin.import_tasks: define_cluster_nodes.yml

- name: "[KVM host] Copy cluster config for {{ item.name }} in {{ tmp_dir }}//{{ group }}/{{ item.name }}"
  ansible.builtin.blockinfile:
    path: "{{ tmp_dir }}/{{ group }}/{{ item.name }}/cluster_config"
    mode: "0644"
    create: true
    block: |
      {{ item | to_nice_json(indent=2) }}
  loop: "{{ cluster_nodes }}"

- name: Prepare OS image
  ansible.builtin.import_tasks: prepare_os_image.yml

- name: "[KVM host] Copy Libvirt XML domain for {{ item.name }} in {{ tmp_dir }}/{{ group }}/{{ item.name }}"
  ansible.builtin.blockinfile:
    path: "{{ tmp_dir }}/{{ group }}/{{ item.name }}/domain.xml"
    mode: "0644"
    create: true
    block: |
      {{ lookup('template', 'libvirt/vm.xml.j2') }}
  loop: "{{ cluster_nodes }}"

- name: Prepare CloudInit/Ignition config
  ansible.builtin.include_tasks: postconfig.yml
  loop: "{{ cluster_nodes }}"

- name: Create networks
  ansible.builtin.import_tasks: libvirt/setup_networks.yml
  when: networks | length > 0

- name: Create disks
  ansible.builtin.include_tasks: libvirt/create_disks.yml

- name: Libvirt setup VMs
  block:
    - name: "Define VMs"
      community.libvirt.virt:
        command: define
        xml: "{{ lookup('template', 'libvirt/vm.xml.j2') }}"
      loop: "{{ cluster_nodes }}"

    - name: "Start a VMs"
      community.libvirt.virt:
        name: "{{ item.fullname }}"
        state: running
      loop: "{{ cluster_nodes }}"

      # Wait for network so we can get the IP to log in
      # Do this for all VMs, in case they already existed and IP has changed
    - name: "Get IP address of VM"
      become: true
      ansible.builtin.shell: >
        set -o pipefail ;
        virsh
        --connect {{ libvirt_url }}
        domifaddr
        --source arp
        {{ item.fullname }}
        | grep -v 'N/A'
        | grep -vw lo
        | grep ipv4
        | grep -Ei '([0-9a-z]{2}:){5}[0-9a-z]{2}'
        | head -1
        | awk '{ print $NF}'
        | awk -F "/" '{print $1}'
      register: result_get_ip
      until: result_get_ip.stdout
      retries: 30
      delay: 10
      changed_when: false
      args:
        executable: /bin/bash
      loop: "{{ cluster_nodes }}"

    - name: "Wait for VMs to listen on port 22"
      ansible.builtin.wait_for:
        host: "{{ item.1.address }}"
        port: 22
        delay: 10
        timeout: 180
      with_subelements:
        - "{{ cluster_nodes }}"
        - interfaces
      when:
        - item.1.address is defined
        - item.1.external is defined
        - item.1.external | bool

    - name: "Detach {{ cloud_init_disk }} config drive disk"
      ansible.builtin.command: >
        virsh detach-disk {{ item.fullname }}
        --target {{ cloud_init_disk }}
        --persistent
        --live
      loop: "{{ cluster_nodes }}"
      when: item.os_type in ["debian", "centos"]
      ignore_errors: true

- name: "[KVM host] Insert nodes into ssh_config"
  become: true
  ansible.builtin.blockinfile:
    mode: "0644"
    create: true
    block: "{{ lookup('template', 'ssh_config.j2') }}"
    path: "{{ ansible_env.HOME }}/.ssh/config"

- name: "[KVM host] Create file {{ tmp_dir }}/{{ group }}/ssh_config"
  ansible.builtin.blockinfile:
    mode: "0644"
    create: true
    block: "{{ lookup('template', 'ssh_config.j2') }}"
    path: "{{ tmp_dir }}/{{ group }}/ssh_config"

- name: "[KVM host] Add new nodes to created_nodes Ansible group"
  ansible.builtin.add_host:
    name: "{{ item.1.address }}"
    instance_name: "{{ item.0.name }}.{{ dns_domain }}"
    ansible_distribution: "{{ item.0.os_type }}"
    ansible_user: "{{ item.0.os_type }}"
    groups: created_nodes
  with_subelements:
    - "{{ cluster_nodes }}"
    - interfaces
  when:
    - item.1.address is defined
    - item.1.external is defined
    - item.1.external | bool

- name: "[KVM host] Create file {{ tmp_dir }}/{{ group }}/etc_hosts"
  become: true
  ansible.builtin.blockinfile:
    mode: "0644"
    create: true
    block: "{{ lookup('template', 'etc_hosts.j2') }}"
    path: "{{ tmp_dir }}/{{ group }}/etc_hosts"

- name: "[KVM host] Populate /etc/hosts file"
  become: true
  ansible.builtin.blockinfile:
    mode: "0644"
    create: true
    block: "{{ lookup('template', 'etc_hosts.j2') }}"
    path: "/etc/hosts"

# - import_tasks: docker/enable_dns_server.yml
#   when: dns_server_enabled | bool

- name: "[KVM host] Create virtual BMC"
  ansible.builtin.shell: >
    {{ result_vbmc_path.stdout }} add {{ item.name }}
    --libvirt-uri {{ libvirt_url }}
    --port {{ item.vbmc_port }}
    --username {{ vbmc_user | default('admin') }}
    --password {{ vbmc_password | default('password') }}
  args:
    executable: /bin/bash
  register: result_vbmc_create
  retries: 10
  delay: 2
  until: result_vbmc_create is succeeded
  when:
    - vbmc_port is defined and vbmc_port
    - vbmc is defined and vbmc|bool
  loop: "{{ cluster_nodes }}"
  notify:
    - restart virtual bmc

- name: "[KVM host] Start virtual BMC"
  ansible.builtin.shell: >
    set -o pipefail
    &&
    {{ result_vbmc_path.stdout }} start {{ item.name }}
  args:
    executable: /bin/bash
  register: result_vbmc_start
  retries: 10
  delay: 2
  until: result_vbmc_start is succeeded
  changed_when: false
  when:
    - vbmc_port is defined and vbmc_port
    - vbmc is defined and vbmc|bool
  loop: "{{ cluster_nodes }}"

- name: Flush handlers
  ansible.builtin.meta: flush_handlers
