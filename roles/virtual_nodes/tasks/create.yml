---
- name: Install CentOS packages
  become: True
  yum:
    name: "{{ yum_dependencies }}"
  when: ansible_distribution|lower == "centos"

- name: Install Ubuntu packages
  become: True
  apt:
    pkg: "{{ apt_dependencies }}"
  when: ansible_distribution|lower == "ubuntu" or ansible_distribution|lower == "debian"

- import_tasks: docker/enable_docker.yml
  become: True
  when: docker_enabled | bool

- name: Install/Update pip packages
  become: True
  pip:
    name: "{{ pip_dependencies }}"
    state: latest
  tags: network

- import_tasks: precheck.yml

- import_tasks: docker/enable_registry.yml

- name: Starting Libvirtd service
  become: True
  service:
    name: "libvirtd"
    state: started
    enabled: True
  tags: network

- import_role:
    name: common
    tasks_from: ssh_key

- name: Load cluster_nodes variables
  set_fact:
    cluster_nodes: "{{ lookup('template','nodes.j2') | from_yaml }}"
  tags: network

- name: "Copy cluster_nodes in {{ tmp_dir }}"
  blockinfile:
    path: "{{ tmp_dir }}/cluster_nodes"
    create: True
    block: |
        {{ cluster_nodes | to_nice_json(indent=2) }}
  tags: network

- name: Display cluster_nodes
  debug:
    msg: "{{ cluster_nodes | to_nice_yaml(indent=2) }}"
  tags: network

- import_tasks: docker/enable_apt_proxy.yml
  when: apt_cache_enabled | bool
  tags: apt_cache

- import_tasks: docker/enable_pip_proxy.yml
  when: pip_cache_enabled | bool
  tags: pip_cache

- import_tasks: prepare_os_image.yml

- name: "Copy cluster config for {{ item.name }} in {{ tmp_dir }}/{{ item.name }}"
  blockinfile:
    path: "{{ tmp_dir }}/{{ item.name }}/cluster_config"
    create: True
    block: |
        {{ item | to_nice_json(indent=2) }}
  with_items: "{{ cluster_nodes }}"
  tags: network

- name: "Copy Libvirt XML domain for {{ item.name }} in {{ tmp_dir }}/{{ item.name }}"
  blockinfile:
    path: "{{ tmp_dir }}/{{ item.name }}/domain.xml"
    create: True
    block: |
        {{ lookup('template', 'vm-template.xml.j2') }}
  with_items: "{{ cluster_nodes }}"

- name: Prepare VMs config
  block:
    - name: Instantiate meta-data file
      template:
        src: "meta-data.j2"
        dest: "{{ tmp_dir }}/{{ item.name }}/meta-data"
      with_items: "{{ cluster_nodes }}"
    - name: Instantiate user-data file
      template:
        src: "user-data.j2"
        dest: "{{ tmp_dir}}/{{ item.name }}/user-data"
      with_items: "{{ cluster_nodes }}"
    - name: Instantiate network-config file
      template:
        src: "network-config.j2"
        dest: "{{ tmp_dir}}/{{ item.name }}/network-config"
      with_items: "{{ cluster_nodes }}"
    - name: Remove config drive files
      file:
        path: "{{ tmp_dir }}/{{ item.name }}/seed.img"
        state: absent
      with_items: "{{ cluster_nodes }}"
    - name: Create config drive
      command: "cloud-localds -v {{ tmp_dir }}/{{ item.name }}/seed.img \
                --network-config {{ tmp_dir }}/{{ item.name }}/network-config \
                  {{ tmp_dir }}/{{ item.name }}/user-data \
                  {{ tmp_dir }}/{{ item.name }}/meta-data"
      with_items: "{{ cluster_nodes }}"
  when: guest_os_distro == "debian" or guest_os_distro == "centos"

- name: Prepare FCOS VMs config
  block:
    - name: Instantiate Ignition config file
      template:
        src: "config-ign.yaml.j2"
        dest: "{{ tmp_dir}}/{{ item.name }}/config-ign.yaml"
      with_items: "{{ cluster_nodes }}"
    - name: Remove Ignition config file
      file:
        path: "{{ tmp_dir }}/{{ item.name }}/config.ign"
        state: absent
      with_items: "{{ cluster_nodes }}"
    - name: Convert Ignition file from YAML format
      command: 'docker run --rm --interactive \
        --security-opt label=disable        \
        --volume {{ tmp_dir }}/{{ item.name }}:/work --workdir /work \
        quay.io/coreos/fcct:release --pretty --strict config-ign.yaml --output config.ign'
      with_items: "{{ cluster_nodes }}"
  when: guest_os_distro == "fcos"

- import_tasks: libvirt/setup_networks.yml
  when: net_interfaces | length > 0
  tags: network

- include_tasks: libvirt/setup_storages.yml
  when: vm_volumes | length > 0

- name: Define VMs
  virt:
    command: define
    xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
  with_items: "{{ cluster_nodes }}"

- name: Start a VMs
  virt:
    name: "{{ item.name }}"
    state: running
  with_items: "{{ cluster_nodes }}"

- name: Wait for VMs to be ready
  wait_for:
    host: "{{ item.1.address }}"
    port: 22
    delay: 10
    timeout: 250
  with_subelements:
    - "{{ cluster_nodes }}"
    - interfaces
  when: item.1.address is defined and item.1.external is defined and item.1.external

- name: Detach vdb config drive disk
  command: virsh detach-disk {{ item.name }} --target vdb --persistent --live
  with_items: "{{ cluster_nodes }}"
  when: guest_os_distro == "debian"
  ignore_errors: True

- name: Insert nodes into ssh_config
  become: True
  blockinfile:
    create: True
    block: "{{ lookup('template', 'ssh_config.j2') }}"
    path: "{{ ansible_env.HOME }}/.ssh/config"

- name: Add new nodes to created_nodes Ansible group
  add_host:
    name: "{{ item.1.address }}"
    instance_name: "{{ item.0.name }}.{{ dns_domain }}"
    ansible_distribution: "{{ guest_os_distro }}"
    ansible_user: "{{ guest_os_distro }}"
    groups: created_nodes
  with_subelements:
    - "{{ cluster_nodes }}"
    - interfaces
  when: item.1.address is defined and item.1.external is defined and item.1.external

- name: Populate /etc/hosts file
  become: True
  lineinfile:
    path: /etc/hosts
    insertafter: EOF
    regexp: "^{{ item.1.address }} {{ item.0.name }}.{{ dns_domain }} {{ item.0.name }}"
    line: "{{ item.1.address }} {{ item.0.name }}.{{ dns_domain }} {{ item.0.name }}"
  with_subelements:
    - "{{ cluster_nodes }}"
    - interfaces
  when: item.1.address is defined and item.1.external is defined and item.1.external

- import_tasks: docker/enable_dns_server.yml
  when: dns_server_enabled | bool
  tags: dns_server
