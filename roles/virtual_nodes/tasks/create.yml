---
- import_tasks: host_precheck.yml
- import_tasks: defaults-get.yml
- import_tasks: lvm_storage.yml

- import_role:
    name: common
    tasks_from: ssh_key

- name: Load cluster_nodes variables
  set_fact:
    cluster_nodes: "{{ lookup('template','nodes.j2') | from_yaml }}"
  tags: network

- name: "Copy cluster_nodes in {{ tmp_dir }}"
  blockinfile:
    path: "{{ tmp_dir }}/cluster_nodes"
    create: True
    block: |
        {{ cluster_nodes | to_nice_json(indent=2) }}
  tags: network

- name: Display cluster_nodes
  debug:
    msg: "{{ cluster_nodes | to_nice_yaml(indent=2) }}"
  tags: network

- import_tasks: prepare_os_image.yml

- name: "Copy cluster config for {{ item.name }} in {{ tmp_dir }}/{{ item.name }}"
  blockinfile:
    path: "{{ tmp_dir }}/{{ item.name }}/cluster_config"
    create: True
    block: |
        {{ item | to_nice_json(indent=2) }}
  with_items: "{{ cluster_nodes }}"
  tags: network

- name: "Copy Libvirt XML domain for {{ item.name }} in {{ tmp_dir }}/{{ item.name }}"
  blockinfile:
    path: "{{ tmp_dir }}/{{ item.name }}/domain.xml"
    create: True
    block: |
        {{ lookup('template', 'vm-template.xml.j2') }}
  with_items: "{{ cluster_nodes }}"

- name: Prepare VMs CloudInit/Ignition config
  include_tasks: vm_postconfig.yml
  loop: "{{ cluster_nodes }}"

- import_tasks: libvirt/setup_networks.yml
  when: net_interfaces | length > 0
  tags: network

- include_tasks: libvirt/create_disks.yml
  when: vm_volumes | length > 0

- name: Libvirt setup VMs
  block:
    - name: Define VMs
      virt:
        command: define
        xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
      with_items: "{{ cluster_nodes }}"

    - name: Start a VMs
      virt:
        name: "{{ item.name }}"
        state: running
      with_items: "{{ cluster_nodes }}"

      # Wait for network so we can get the IP to log in
      # Do this for all VMs, in case they already existed and IP has changed
    - name: Get IP address of VM
      become: true
      shell: >
        set -o pipefail ;
        virsh
        --connect {{ libvirt_url }}
        domifaddr
        --source arp
        {{ item.name }}
        | grep -v 'N/A'
        | grep -vw lo
        | grep ipv4
        | grep -Ei '([0-9a-z]{2}:){5}[0-9a-z]{2}'
        | head -1
        | awk '{ print $NF}'
        | awk -F "/" '{print $1}'
      register: result_get_ip
      until: result_get_ip.stdout
      retries: 30
      delay: 10
      changed_when: false
      args:
        executable: /bin/bash
      with_items: "{{ cluster_nodes }}"

    - name: Wait for VMs to be ready
      wait_for:
        host: "{{ item.1.address }}"
        port: 22
        delay: 10
        timeout: 300
      with_subelements:
        - "{{ cluster_nodes }}"
        - interfaces
      when: item.1.address is defined and item.1.external is defined and item.1.external

    - name: "Detach {{ cloud_init_disk }} config drive disk"
      command: virsh detach-disk {{ item.name }} --target {{ cloud_init_disk }} --persistent --live
      with_items: "{{ cluster_nodes }}"
      when: item.os_type in ["debian", "centos"]
      ignore_errors: True

- name: Insert nodes into ssh_config
  become: True
  blockinfile:
    create: True
    block: "{{ lookup('template', 'ssh_config.j2') }}"
    path: "{{ ansible_env.HOME }}/.ssh/config"

- name: Add new nodes to created_nodes Ansible group
  add_host:
    name: "{{ item.1.address }}"
    instance_name: "{{ item.0.name }}.{{ dns_domain }}"
    ansible_distribution: "{{ guest_os_distro }}"
    ansible_user: "{{ item.0.os_type }}"
    groups: created_nodes
  with_subelements:
    - "{{ cluster_nodes }}"
    - interfaces
  when: item.1.address is defined and item.1.external is defined and item.1.external

- name: Populate /etc/hosts file
  become: True
  lineinfile:
    path: /etc/hosts
    insertafter: EOF
    regexp: "^{{ item.1.address }} {{ item.0.name }}.{{ dns_domain }} {{ item.0.name }}"
    line: "{{ item.1.address }} {{ item.0.name }}.{{ dns_domain }} {{ item.0.name }}"
  with_subelements:
    - "{{ cluster_nodes }}"
    - interfaces
  when: item.1.address is defined and item.1.external is defined and item.1.external

# - import_tasks: docker/enable_dns_server.yml
#   when: dns_server_enabled | bool
#   tags: dns_server
