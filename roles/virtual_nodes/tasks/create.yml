---
- name: Install CentOS packages
  become: True
  yum:
    name: "{{ yum_dependencies }}"
  when: ansible_distribution|lower == "centos"

- name: Install Ubuntu packages
  become: True
  apt:
    pkg: "{{ apt_dependencies }}"
  when: ansible_distribution|lower == "ubuntu"

- import_tasks: docker/enable_docker.yml
  become: True
  when: docker_enabled | bool

- name: Install/Update pip packages
  become: True
  pip:
    name: "{{ pip_dependencies }}"
    state: latest

- import_tasks: docker/enable_registry.yml

- name: Starting Libvirt service
  become: True
  service:
    name: "libvirtd"
    state: started
    enabled: True

- name: Load cluster_nodes variables
  set_fact:
    cluster_nodes: "{{ lookup('template','nodes.j2') | from_yaml }}"

- name: Display cluster_nodes
  debug:
    msg: "{{ cluster_nodes | to_nice_yaml(indent=2) }}"

- import_tasks: libvirt/setup_libvirt_networks.yml
  become: True

- include_tasks: libvirt/setup_libvirt_storages.yml
  become: True
  when: storage_volume_enabled | bool

- import_tasks: docker/enable_apt_proxy.yml
  when: apt_cache_enabled | bool
  tags: apt_cache

- import_tasks: docker/enable_pip_proxy.yml
  when: pip_cache_enabled | bool
  tags: pip_cache

- import_tasks: retrieve_os_image.yml

- name: Steps to instanciate VM using Libvirt
  block:
    - name: Instantiate meta-data file
      template:
        src: "meta-data.j2"
        dest: "{{ tmp_dir }}/{{ item.name }}/meta-data"
      with_items: "{{ cluster_nodes }}"
    - name: Instantiate user-data file
      template:
        src: "user-data.j2"
        dest: "{{ tmp_dir}}/{{ item.name }}/user-data"
      with_items: "{{ cluster_nodes }}"
    - name: Remove config drive files
      file:
        path: "{{ tmp_dir }}/{{ item.name }}/config.iso"
        state: absent
      with_items: "{{ cluster_nodes }}"
    - name: Create config drive
      command: "genisoimage -input-charset utf-8 \
               -o {{ tmp_dir }}/{{ item.name }}/config.iso \
               -V cidata -r -J {{ tmp_dir }}/{{ item.name }}/meta-data \
               {{ tmp_dir }}/{{ item.name }}/user-data"
      with_items: "{{ cluster_nodes }}"
    - name: Display VM template
      debug:
        msg: "{{ lookup('template', 'vm-template.xml.j2') }}"
      with_items: "{{ cluster_nodes }}"
    - name: Define a VM
      virt:
        name: "{{ item.name }}"
        command: define
        xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
      with_items: "{{ cluster_nodes }}"
    - name: Start a VM
      virt:
        name: "{{ item.name }}"
        state: running
      with_items: "{{ cluster_nodes }}"

- name: Wait for VMs to boot
  wait_for:
    host: "{{ item.1.address }}"
    port: 22
    delay: 10
    timeout: 250
  with_subelements:
    - "{{ cluster_nodes }}"
    - interfaces
  when: item.1.address is defined and item.1.mode == "dhcp"

- name: Insert node into ssh_config
  become: True
  blockinfile:
    block: "{{ lookup('template', 'ssh_config.j2') }}"
    path: "{{ ansible_env.HOME }}/.ssh/config"

- name: Add new node to created_nodes Ansible group
  add_host:
    name: "{{ item.1.address }}"
    instance_name: "{{ item.0.name }}.{{ dns_domain }}"
    ansible_distribution: "{{ vm_os_distro }}"
    ansible_user: "{{ vm_os_distro }}"
    groups: created_nodes
  with_subelements:
    - "{{ cluster_nodes }}"
    - interfaces
  when: item.1.address is defined and item.1.mode == "dhcp"

- name: Populate /etc/hosts file
  become: True
  lineinfile:
    path: /etc/hosts
    insertafter: EOF
    regexp: "^{{ item.1.address }} {{ item.0.name }}.{{ dns_domain }} {{ item.0.name }}"
    line: "{{ item.1.address }} {{ item.0.name }}.{{ dns_domain }} {{ item.0.name }}"
  with_subelements:
    - "{{ cluster_nodes }}"
    - interfaces
  when: item.1.address is defined and item.1.mode == "dhcp"

- import_tasks: docker/enable_dns_server.yml
  when: dns_server_enabled | bool
  tags: dns_server
