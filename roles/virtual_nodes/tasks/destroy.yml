---
- import_tasks: host_precheck.yml

- import_tasks: define_cluster_networks.yml
- import_tasks: define_cluster_nodes.yml

- name: Steps to destroy VM using Libvirt
  block:
    - name: List snapshots
      shell: "set -o pipefail ;virsh -q snapshot-list --domain {{ item.fullname }} | cut -d ' ' -f2"
      loop: "{{ cluster_nodes }}"
      register: with_output
      args:
        executable: /bin/bash
      ignore_errors: true

    - name: Delete metadata snapshots
      command: "virsh snapshot-delete --metadata --domain {{ item.0.item.name }} {{ item.1 }}"
      with_subelements:
        - "{{ with_output.results }}"
        - "stdout_lines"

    - name: Delete snapshots
      command: "virsh snapshot-delete --domain {{ item.0.item.name }} {{ item.1 }}"
      with_subelements:
        - "{{ with_output.results }}"
        - "stdout_lines"
      ignore_errors: true

    - name: Destroy VMs
      virt:
        command: destroy
        name: "{{ item.fullname }}"
      loop: "{{ cluster_nodes }}"
      ignore_errors: true

    - name: Undefine VMs
      virt:
        command: undefine
        name: "{{ item.fullname }}"
      loop: "{{ cluster_nodes }}"
      ignore_errors: true

    - name: Remove OS images from libvirt directory
      become: true
      file:
        path: "{{ libvirt_dir }}/{{ group }}/{{ item.name }}-boot.qcow2"
        state: absent
      loop: "{{ cluster_nodes }}"

    - name: Delete qcow2 images
      file:
        path: "{{ libvirt_dir }}/{{ group }}/{{ item.name }}.qcow2"
        state: absent
      loop: "{{ cluster_nodes }}"
      when: destroy_images | bool

    - name: "Clean group directory in {{ libvirt_dir }}"
      file:
        path: "{{ tmp_dir }}/{{ group }}"
        state: absent

- import_tasks: libvirt/destroy_networks.yml
  when: networks | length > 0

- include_tasks: libvirt/destroy_disks.yml

- name: "Clean nodes config in {{ tmp_dir }}/{{ group }}"
  file:
    path: "{{ tmp_dir }}/{{ group }}/{{ item.name }}"
    state: absent
  loop: "{{ cluster_nodes }}"

- name: Clean nodes from ssh_config
  blockinfile:
    block: "{{ lookup('template', 'ssh_config.j2') }}"
    path: "{{ ansible_env.HOME }}/.ssh/config"
    state: absent
  ignore_errors: true

- name: Clean nodes from SSH known_hosts
  command:
    cmd: ssh-keygen -f "{{ ansible_env.HOME }}/.ssh/known_hosts" -R "{{ item.1.address }}"
  with_subelements:
    - "{{ cluster_nodes }}"
    - interfaces
  when: item.1.address is defined and item.1.external is defined and item.1.external
  ignore_errors: true

- name: Clean /etc/hosts file
  become: true
  lineinfile:
    path: /etc/hosts
    line: "{{ item.1.address }} {{ item.0.name }}.{{ dns_domain }} {{ item.0.name }}"
    state: absent
  with_subelements:
    - "{{ cluster_nodes }}"
    - interfaces
  when: item.1.address is defined and item.1.external is defined and item.1.external
  ignore_errors: true

- name: "Clean {{ ansible_env.HOME }}/.ssh/known_hosts"
  known_hosts:
    path: "{{ ansible_env.HOME }}/.ssh/known_hosts"
    name: "{{ item.name }}.{{ dns_domain }}"
    state: absent
  loop: "{{ cluster_nodes }}"
  ignore_errors: true

- name: Remove virtual BMC
  shell: "set -o pipefail && {{ result_vbmc_path.stdout }} delete {{ item.name }}"
  args:
    executable: /bin/bash
  register: result_vbmc_remove
  ignore_errors: true
  when:
    - vbmc_port is defined and vbmc_port
    - vbmc is defined and vbmc
  loop: "{{ cluster_nodes }}"
  notify:
    - restart virtual bmc

- meta: flush_handlers
