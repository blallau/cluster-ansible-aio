---
- import_tasks: docker/disable_registry.yml
  when: destroy_docker_registry | bool

- import_tasks: docker/disable_pip_proxy.yml
  when: pip_cache_enabled | bool and destroy_pip_cache | bool

- import_tasks: docker/disable_apt_proxy.yml
  when: apt_cache_enabled | bool and destroy_apt_cache | bool
  tags: apt_cache

- import_tasks: docker/disable_dns_server.yml
  when: dns_server_enabled | bool and destroy_dns_server | bool
  tags: dns_server

- name: Load cluster_nodes variables
  set_fact:
    cluster_nodes: "{{ lookup('template','nodes.j2') | from_yaml }}"

# TODO destroy snapshot if present
- name: Steps to destroy VM using Libvirt
  block:
    - name: Destroy VMs
      virt:
        command: destroy
        name: "{{ item.name }}"
      with_items: "{{ cluster_nodes }}"
    - name: Undefine VMs
      virt:
        command: undefine
        name: "{{ item.name }}"
      with_items: "{{ cluster_nodes }}"
    - name: Remove OS images from libvirt directory
      become: True
      file:
        path: "{{ libvirt_dir }}/{{ item.name }}.qcow2"
        state: absent
      with_items: "{{ cluster_nodes }}"
    - name: Delete qcow2 images
      file:
        path: "{{ libvirt_dir }}/{{ item.name }}.qcow2"
        state: absent
      with_items: "{{ cluster_nodes }}"
      when: destroy_images | bool
  ignore_errors: True

- import_tasks: libvirt/destroy_libvirt_networks.yml

- include_tasks: libvirt/destroy_libvirt_storages.yml
  when: vm_volumes|length > 0

- name: "Clean nodes config in {{ tmp_dir }}"
  file:
    path: "{{ tmp_dir }}/{{ item.name }}"
    state: absent
  with_items: "{{ cluster_nodes }}"

- name: Clean nodes from ssh_config
  become: True
  blockinfile:
    block: "{{ lookup('template', 'ssh_config.j2') }}"
    path: "{{ ansible_env.HOME }}/.ssh/config"
    state: absent

- name: Clean /etc/hosts file
  become: True
  lineinfile:
    path: /etc/hosts
    line: "{{ item.1.address }} {{ item.0.name }}.{{ dns_domain }} {{ item.0.name }}"
    state: absent
  with_subelements:
    - "{{ cluster_nodes }}"
    - interfaces
  when: item.1.address is defined and item.1.external is defined and item.1.external

- name: "Clean {{ ansible_env.HOME }}/.ssh/known_hosts"
  known_hosts:
    path: "{{ ansible_env.HOME }}/.ssh/known_hosts"
    name: "{{ item.name }}.{{ dns_domain }}"
    state: absent
  with_items: "{{ cluster_nodes }}"
