---
- name: Run all the validations
  block:
    - name: Libvirt stuff
      block:
        - name: "[KVM host] Add {{ ansible_user_id }} to libvirt group"
          become: true
          ansible.builtin.user:
            name: "{{ ansible_user_id }}"
            groups: libvirt
            append: true

        # Set security driver on qemu (none/selinux/apparmor)
        # RHEL/CentOS/Fedora/openSUSE are set to selinux by default
        # Debian/Ubuntu are set to apparmor by default
        # Defaults to "none" when not specified, which enables use of NVMe drives successfully on all distros
        # Else we get permissions denied on NVMe disk images
        - name: "[KVM host] Set libvirtd security driver"
          become: true
          ansible.builtin.lineinfile:
            path: /etc/libvirt/qemu.conf
            insertafter: '^#\s*security_driver\s*='
            regexp: '^security_driver\s*='
            line: 'security_driver = "{{ libvirt_security_driver }}"'
          register: result_qemuconf

        - name: "[KVM host] Restart libvirtd if config changed"
          become: true
          ansible.builtin.service:
            name: "libvirtd"
            state: restarted
            enabled: true
          register: result_libvirtd_restart
          ignore_errors: true
          when:
            - result_qemuconf.changed

        - name: "[KVM host] Ensure libvirtd is running"
          become: true
          ansible.builtin.service:
            name: "libvirtd"
            state: started
            enabled: true
          register: result_libvirtd
          ignore_errors: true

        - name: "[KVM host] Advise unable to start libvirtd"
          ansible.builtin.set_fact:
            validations_failed: "{{ validations_failed | default([]) + ['KVM host: Failed to start and enable libvirtd'] }}"
          when:
            - result_libvirtd.failed
          changed_when: true

        # TODO: use this? 'virt-host-validate qemu'
        - name: "[KVM host] Test that we can talk to libvirtd"
          become: true
          community.libvirt.virt:
            command: list_vms
            uri: "{{ libvirt_url }}"
          register: result_libvirtd
          ignore_errors: true

        - name: "[KVM host] Advise libvirtd not contactable"
          ansible.builtin.set_fact:
            validations_failed: "{{ validations_failed | default([]) + ['KVM host: libvirtd connection failed on KVM host'] }}"
          when:
            - result_libvirtd.list_vms is not defined
          changed_when: true
        # Allow MAC access to NVMe drives when using apparmor
        # Else we get permissions denied on NVMe disk images
        - name: "[KVM host] Enable access to NVMe drives in apparmor"
          become: true
          ansible.builtin.lineinfile:
            path: /etc/apparmor.d/abstractions/libvirt-qemu
            line: '  /var/lib/libvirt/images/*nvme.qcow2 rwk,'
          register: result_apparmor_conf
          when:
            - libvirt_security_driver is defined
            - libvirt_security_driver == "apparmor"

        - name: "[KVM host] Restart apparmor if config changed"
          become: true
          ansible.builtin.service:
            name: "apparmor"
            state: restarted
            enabled: true
          register: result_apparmor
          ignore_errors: true
          when:
            - libvirt_security_driver is defined
            - libvirt_security_driver == "apparmor"
            - result_apparmor_conf.changed
      rescue:
        - ansible.builtin.debug:
            msg: "Play aborted, see errors above"
          changed_when: true

        - ansible.builtin.meta: end_play

    - name: Virtualbmc stuff
      block:
        - name: "[KVM host] Ensure system package of virtualbmc is removed"
          become: true
          ansible.builtin.package:
            name: "python3-virtualbmc"
            state: absent
          register: result_vbmc_remove
          retries: 30
          delay: 5
          until: result_vbmc_remove is succeeded
          when:
            - vbmc | bool and vbmc_pip
          ignore_errors: true

        - name: "[KVM host] Advise unable to remove virtualbmc host package"
          ansible.builtin.set_fact:
            validations_failed: "{{ validations_failed | default([]) + ['KVM host: Failed to remove vbmc host package'] }}"
          when:
            - vbmc | bool and vbmc_pip
            - result_vbmc_remove.failed
          changed_when: true

        - name: "[KVM host] Install virtualbmc with pip"
          become: true
          ansible.builtin.pip:
            name: virtualbmc {%- if vbmc_pip_version is defined %}=={{ vbmc_pip_version }}{% endif %}
            extra_args: "--prefix /usr/local"
          register: result_vbmc_pip
          ignore_errors: true
          retries: 30
          delay: 5
          until: result_vbmc_pip is succeeded
          when:
            - vbmc | bool and vbmc_pip

        - name: "[KVM host] Find the path for virtualbmc"
          ansible.builtin.command: "which vbmc"
          register: result_vbmc_path
          when:
            - vbmc | bool
          changed_when: false
          ignore_errors: true

        - name: "[KVM host] Advise unable to find virtualbmc"
          ansible.builtin.set_fact:
            validations_failed: "{{ validations_failed | default([]) + ['KVM host: Cannot find vbmc binary, is it installed?'] }}"
          when:
            - vbmc | bool
            - result_vbmc_path.failed is defined
            - result_vbmc_path.failed
          changed_when: true

        - name: "[KVM host] Advise unable to install virtualbmc"
          ansible.builtin.set_fact:
            validations_failed: "{{ validations_failed | default([]) + ['KVM host: Failed to install virtualbmc with pip'] }}"
          when:
            - vbmc | bool and vbmc_pip
            - result_vbmc_pip.failed
          changed_when: true

        - name: "[KVM host] Create virtualbmc service file"
          become: true
          ansible.builtin.template:
            src: templates/vbmcd.service.j2
            dest: "/etc/systemd/system/vbmcd.service"
            mode: '0644'
          register: result_vbmc_service
          ignore_errors: true
          when:
            - vbmc | bool and vbmc_pip

        - name: "[KVM host] Advise unable to create virtualbmc service"
          ansible.builtin.set_fact:
            validations_failed: "{{ validations_failed | default([]) + ['KVM host: Failed to create virtualbmc service'] }}"
          when:
            - vbmc | bool and vbmc_pip
            - result_vbmc_service.failed
          changed_when: true

        - name: "[KVM host] Create virtualbmc config directory"
          become: true
          ansible.builtin.file:
            path: /etc/virtualbmc
            state: directory
            mode: '0755'
          ignore_errors: true
          when:
            - vbmc | bool and vbmc_pip

        - name: "[KVM host] Create virtualbmc run directory"
          become: true
          ansible.builtin.file:
            path: /var/lib/vbmcd
            state: directory
            mode: '0755'
          ignore_errors: true
          when:
            - vbmc | bool and vbmc_pip

        - name: "[KVM host] Create config for virtualbmc"
          become: true
          ansible.builtin.template:
            src: templates/virtualbmc.conf.j2
            dest: "/etc/virtualbmc/virtualbmc.conf"
            mode: '0644'
          ignore_errors: true
          when:
            - vbmc | bool and vbmc_pip

        - name: "[KVM host] Ensure virtualbmc is running"
          become: true
          ansible.builtin.systemd:
            name: "{{ vbmc_service }}"
            state: restarted
            daemon_reload: true
            enabled: true
          register: result_virtualbmc
          ignore_errors: true
          changed_when: false
          when:
            - vbmc | bool

        - name: "[KVM host] Advise unable to start virtualbmc"
          ansible.builtin.set_fact:
            validations_failed: "{{ validations_failed | default([]) + ['KVM host: Failed to start and enable virtualbmc'] }}"
          when:
            - vbmc | bool
            - result_virtualbmc.status.ActiveState is defined
            - result_virtualbmc.status.ActiveState == "failed"
          changed_when: true

        - name: "[KVM host] Get virtual BMC list"
          become: true
          ansible.builtin.shell: vbmc list -f json --noindent |sed 's/Domain name/Name/g'
          register: result_vbmc_list
          args:
            executable: /bin/bash
          when:
            - vbmc | bool
            - result_virtualbmc.failed is defined and not result_virtualbmc.failed
          changed_when: false
      rescue:
        - name: Resume errors
          ansible.builtin.debug:
            msg: "Play aborted, see errors above"
          changed_when: true

        - name: End play
          ansible.builtin.meta: end_play
