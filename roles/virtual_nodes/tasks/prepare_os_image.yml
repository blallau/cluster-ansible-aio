---
- name: "[KVM host] Check qcow2 OS image {{ tmp_dir }}/{{ item.image }} is present"
  ansible.builtin.stat:
    path: "{{ tmp_dir }}/{{ item.image }}"
  loop: "{{ cluster_nodes }}"
  register: check_os_image

- name: Fail if OS image not present
  ansible.builtin.fail:
    msg: "In order to deploy VMs, you must first copy OS image to {{ tmp_dir }}"
  when: not item.stat.exists
  loop: "{{ check_os_image.results }}"

- name: "[KVM host] Make sure temp directory exists"
  ansible.builtin.file:
    path: "{{ tmp_dir }}/{{ group }}"
    state: directory

- name: "[KVM host] Create VM-specific directories"
  ansible.builtin.file:
    path: "{{ tmp_dir }}/{{ group }}/{{ item.name }}"
    state: directory
  loop: "{{ cluster_nodes }}"

- name: "[KVM host] Check if OS files are already in libvirt directory"
  ansible.builtin.stat:
    path: "{{ libvirt_dir }}/{{ group }}/{{ item.name }}-boot.qcow2"
  loop: "{{ cluster_nodes }}"
  register: copied

- name: "[KVM host] Make sure libvirt OS directory exists"
  ansible.builtin.file:
    path: "{{ libvirt_dir }}/{{ group }}"
    state: directory
  become: true

- name: "[KVM host] Copy OS images to libvirt directory"
  become: true
  ansible.builtin.copy:
    src: "{{ tmp_dir }}/{{ item.image }}"
    dest: "{{ libvirt_dir }}/{{ group }}/{{ item.name }}-boot.qcow2"
    remote_src: true
  loop: "{{ cluster_nodes }}"

- name: "[KVM host] Increase the image size"
  become: true
  ansible.builtin.command: >
    qemu-img resize
    {{ libvirt_dir }}/{{ group }}/{{ item.item.name }}-boot.qcow2
    +{{ item.item.disk_size }}G
  loop: "{{ copied.results }}"
  when: item.item.name is not match("flatcar.*")

- name: "[KVM host] Run custom shell commands in OS disk"
  become: true
  ansible.builtin.command: >
    virt-customize
    -a {{ libvirt_dir }}/{{ group }}/{{ item.item.name }}-boot.qcow2
    {% if virt_customize_cmd is defined and virt_customize_cmd %}
    {% for cmd in virt_customize_cmd %}
    --run-command "{{ cmd }}"
    {% endfor %}
    {% endif %}
  register: result_disk_cmd
  retries: 10
  delay: 2
  until: result_disk_cmd is succeeded
  loop: "{{ copied.results }}"
  when:
    - item.item.name is not match("flatcar.*")
    - virt_customize_cmd is defined and virt_customize_cmd

- name: "[KVM host] Install required packages into OS disk"
  become: true
  ansible.builtin.command: >
    virt-customize
    -a {{ libvirt_dir }}/{{ group }}/{{ item.item.name }}-boot.qcow2
    --install {{ virt_customize_packages | join(',') }}
  register: result_disk_deps
  retries: 10
  delay: 2
  until: result_disk_deps is succeeded
  loop: "{{ copied.results }}"
  when:
    - item.item.name is not match("flatcar.*")
    - virt_customize_packages is defined
    - virt_customize_packages

- name: "[KVM host] Sysprep guest disk"
  become: true
  ansible.builtin.command: >
    virt-sysprep
    --selinux-relabel
    {% if virt_root_password is defined and virt_root_password %}
    --root-password password:{{ virt_root_password }}
    {% endif %}
    --add {{ libvirt_dir }}/{{ group }}/{{ item.item.name }}-boot.qcow2
  register: result_disk_sysprep
  loop: "{{ copied.results }}"
  when:
    - item.item.name is not match("flatcar.*")
