---
- name: Install CentOS packages
  become: true
  yum:
    name: "{{ yum_dependencies }}"
  when: ansible_distribution|lower == "centos"

- name: Install Ubuntu packages
  become: true
  apt:
    pkg: "{{ apt_dependencies }}"
  when: ansible_distribution|lower in ["ubuntu", "debian"]
  register: install_snap

- name: "Add {{ ansible_user }} to libvirt group"
  become: true
  user:
    name: "{{ ansible_user }}"
    groups: libvirt
    append: true

- name: Restart libvirtd service
  become: true
  service:
    name: libvirtd
    state: restarted
    enabled: true

- name: Install/Update pip packages
  become: true
  pip:
    name: "{{ pip_dependencies }}"
    state: latest

- name: Restart the snapd service
  become: true
  systemd:
    name: snapd.service
    enabled: true
    state: restarted
  when: install_snap.changed

- name: Install core snap
  become: true
  snap:
    name:
      - core

- name: Install lxd snap
  become: true
  snap:
    name:
      - lxd

- name: Add {{ ansible_user }} user to lxd secondary group
  become: true
  user:
    name: "{{ ansible_user }}"
    append: true
    groups: lxd

- name: Create /etc/tmpfiles.d/kmsg.conf file
  become: true
  file:
    path: /etc/tmpfiles.d/kmsg.conf
    state: touch
    owner: root
    group: root
    mode: '0644'

- name: "Create /dev/kmsg symlink to /dev/console"
  become: true
  lineinfile:
    path: "/etc/tmpfiles.d/kmsg.conf"
    line: 'L /dev/kmsg - - - - /dev/console'
    state: present

- name: "Set subuid and subgid for LXD"
  become: true
  lineinfile:
    path: "{{ item }}"
    line: 'root:1000000:65536'
    state: present
  loop:
    - "/etc/subuid"
    - "/etc/subgid"

- name: reset ssh connection to allow user changes to affect 'current login user'
  meta: reset_connection

- name: /snap/bin/lxd init --auto
  command: /snap/bin/lxd init --auto
  args:
    creates: /var/snap/lxd/common/lxd/storage-pools/default
  become: true

- import_role:
    name: common
    tasks_from: ssh_key

- import_tasks: define_cluster_nodes.yml

- import_tasks: libvirt/setup_networks.yml
  when: networks | length > 0
  tags: network

- name: "Copy cluster config for {{ item.name }} in {{ tmp_dir }}/{{ item.name }}"
  blockinfile:
    path: "{{ tmp_dir }}/{{ item.name }}/cluster_config"
    create: true
    block: |
        {{ item | to_nice_json(indent=2) }}
  loop: "{{ cluster_nodes }}"
  tags: network

- name: Prepare CloudInit/Ignition config
  include_tasks: postconfig.yml
  loop: "{{ cluster_nodes }}"

- import_tasks: libvirt/setup_networks.yml
  when: networks | length > 0
  tags: network

- include_tasks: lxd/create_disks.yml

- name: "Generate lxd_profile_devices"
  template:
    src: "lxd_profile_devices.j2"
    dest: "{{ tmp_dir }}/{{ item.name }}/lxd_profile_devices"
  loop: "{{ cluster_nodes }}"

# https://github.com/Nani-o/ansible-role-lxd/blob/master/tasks/containers.yml
- name: Create containers
  lxd_container:
    name: "{{ item.name }}"
    state: "started"
    config:
      boot.autostart: "false"
      limits.cpu: "{{ item.vcpu }}"
      limits.memory: "{{ item.ram }}GB"
      linux.kernel_modules: ip_vs,ip_vs_rr,ip_vs_wrr,ip_vs_sh,ip_tables,ip6_tables,netlink_diag,nf_nat,overlay,br_netfilter,xt_conntrack
      raw.lxc: |
        lxc.apparmor.profile=unconfined
        lxc.mount.auto=proc:rw sys:rw cgroup:rw
        lxc.cgroup.devices.allow=a
        lxc.cap.drop=
      security.nesting: "true"
      security.privileged: "true"
      user.user-data: "{{ lookup('template', './user-data.j2') }}"
      user.meta-data: "{{ lookup('template', './meta-data.j2') }}"
      user.network-config: "{{ lookup('template', './network-config.j2') }}"
    source:
      type: "image"
      mode: "pull"
      server: "{{ lxd_image_url }}"
      protocol: "simplestreams"
      alias: "{{ guest_os_image }}"
    devices: "{{ lookup('template', './lxd_profile_devices.j2') }}"
    wait_for_ipv4_addresses: true
    snap_url: "{{ lxd_snap_url }}"
    timeout: 600
  loop: "{{ cluster_nodes }}"
  when: "cluster_nodes is defined"

- name: Wait for containers to be ready
  wait_for:
    host: "{{ item.1.address }}"
    port: 22
    delay: 10
    timeout: 250
  with_subelements:
    - "{{ cluster_nodes }}"
    - interfaces
  when: item.1.address is defined and item.1.external is defined and item.1.external

- name: Insert nodes into ssh_config
  become: true
  blockinfile:
    create: true
    block: "{{ lookup('template', 'ssh_config.j2') }}"
    path: "{{ lookup('env', 'HOME') }}/.ssh/config"
  tags: postconf

- name: Add new nodes to created_nodes Ansible group
  add_host:
    name: "{{ item.1.address }}"
    instance_name: "{{ item.0.name }}.{{ dns_domain }}"
    ansible_distribution: "{{ item.0.os_type }}"
    ansible_user: "{{ item.0.os_type }}"
    groups: created_nodes
  with_subelements:
    - "{{ cluster_nodes }}"
    - interfaces
  when: item.1.address is defined and item.1.external is defined and item.1.external
  tags: postconf

- name: Populate /etc/hosts file
  become: true
  lineinfile:
    path: /etc/hosts
    insertafter: EOF
    regexp: "^{{ item.1.address }} {{ item.0.name }}.{{ dns_domain }} {{ item.0.name }}"
    line: "{{ item.1.address }} {{ item.0.name }}.{{ dns_domain }} {{ item.0.name }}"
  with_subelements:
    - "{{ cluster_nodes }}"
    - interfaces
  when: item.1.address is defined and item.1.external is defined and item.1.external
  tags: postconf
