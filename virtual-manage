#!/bin/bash
# CONF_FILE=$HOME/.cluster-ansible-aio-env
# ALL_VMS=0

# if [[ -z "${NODE_PREFIX}" ]] || [[ ! -f ${CONF_FILE} ]]; then
#     if [[ ! $ALL_VMS ]]; then
#         echo "Error: NODE_PREFIX variable must be set"
#         exit 1
#     fi
# fi
# if [[ -n "${NODE_PREFIX}" ]]; then
#     echo "${NODE_PREFIX}" > ${CONF_FILE}
# else
#     NODE_PREFIX=$(cat ${CONF_FILE})
# fi

# echo -e "\e[93mEnvironment: $NODE_PREFIX\e[39m"
NODE_PREFIX=""

NODE_TYPES="^${NODE_PREFIX}.*$"
SNAPSHOT_NAME=""
DISK_DIRECTORY="${HOME}/tmp"
DISK_SIZE=10
TIMEOUT=300
GRACEFULLY_SHUTDOWN=false

function start {
    #    docker start docker-dnsmasq
    echo -e "\e[32m\e[1m==> Start all inactive domains\e[0m"
	list_inactive_domains | while read DOMAIN; do
        for node in $NODE_TYPES; do
            if [[ "$DOMAIN" =~ $node ]]; then
		        virsh start $DOMAIN | grep -v "^$"
            fi
        done
	done
    echo -e "\e[32m\e[1m==> All domains started :) \e[0m"
}

function status {
	list_all_domains | while read DOMAIN; do
        for node in $NODE_TYPES; do
            if [[ "$DOMAIN" =~ $node ]]; then
		        echo -e "  $DOMAIN   \e[1m\e[92mrunning\e[39m\e[0m"
                echo -e "  $(virsh dominfo $DOMAIN | grep CPU\(s\))"
                echo -e "  $(virsh dominfo $DOMAIN | grep 'Max memory')"
                echo -e ""
                echo -e "$(virsh -q domblklist $DOMAIN --details)"
                echo -e ""
                echo -e "$(virsh -q domfsinfo $DOMAIN)"
                echo -e ""
                echo -e "$(virsh -q domifaddr $DOMAIN --source agent | grep ipv4)"
                echo -e "\n"
            fi
        done
	done
}

function cleanup {
	list_all_domains | while read DOMAIN; do
        for node in $NODE_TYPES; do
            if [[ "$DOMAIN" =~ $node ]]; then
                virsh destroy $DOMAIN
		        virsh undefine --remove-all-storage $DOMAIN
            fi
        done
	done
}

function acpi_shutdown {
	list_running_domains | while read DOMAIN; do
        for node in $NODE_TYPES; do
            if [[ "$DOMAIN" =~ $node ]]; then
		        virsh shutdown $DOMAIN --mode acpi
            fi
        done
	done
}

function power_shutdown {
	echo -e "==> power shutdown all running KVM domains..."
	list_running_domains | while read DOMAIN; do
        for node in $NODE_TYPES; do
            if [[ "$DOMAIN" =~ $node ]]; then
		        virsh destroy $DOMAIN | grep -v "^$"
		        # Give libvirt some time for killing off the domain.
		        sleep 3
            fi
        done
	done
}

function shutdown {
    echo -e "\e[33m\e[1m==> Shutdown all domains\e[0m"
    if [ "$GRACEFULLY_SHUTDOWN" = true ]; then
	    echo -e "Try to cleanly shutdown all running KVM domains...\n"
        acpi_shutdown

	    # Wait until all domains are shut down or timeout has reached.
	    END_TIME=$(date -d "$TIMEOUT seconds" +%s)

	    while [ $(date +%s) -lt $END_TIME ]; do
		    # Break while loop when no domains are left.
		    test -z "$(list_running_domains)" && break
		    # Wait a litte, we don't want to DoS libvirt.
		    sleep 3
	    done
    fi
    power_shutdown
    sleep 5
    echo -e "\e[33m\e[1m==> All domains shutdown :)\e[0m"
    # list_inactive_domains
}

function restart {
    shutdown
    start
}

function renew-dhcp {
	list_all_domains | while read -e DOMAIN; do
        for node in $NODE_TYPES; do
            if [[ "$DOMAIN" =~ $node ]]; then
                ssh -n root@${DOMAIN} "nmcli con up id 'System eth0'" 2>&1 > /dev/null
            fi
        done
	done
}

function list_inactive_domains() {
    virsh -q list --inactive | grep "shut off" | awk '{print $2}'
}

function list_running_domains() {
    virsh -q list | grep "running" | awk '{ print $2}'
}

function list_all_domains() {
    virsh -q list | awk '{ print $2}'
}

function list_all_snapshots() {
    DOMAIN=$1
    virsh -q snapshot-list --domain $DOMAIN | awk '{ print $1}'
}

function add-disk {
	list_running_domains | while read DOMAIN; do
        for node in $NODE_TYPES; do
            if [[ "$DOMAIN" =~ $node ]]; then
                sudo qemu-img create -f qcow2 ${DISK_DIRECTORY}/${DOMAIN}/disk-${DISK_SIZE}.qcow2 ${DISK_SIZE}G
                virsh attach-disk --domain $DOMAIN --source ${DISK_DIRECTORY}/${DOMAIN}/disk-${DISK_SIZE}.qcow2 --subdriver qcow2 --target vdd --live --cache none
                echo "Disk added to $DOMAIN domain"
            fi
        done
    done
}

function remove-disk {
	list_running_domains | while read DOMAIN; do
        for node in $NODE_TYPES; do
            if [[ "$DOMAIN" =~ $node ]]; then
                virsh detach-disk --domain $DOMAIN --target vdd --live
                sudo rm ${DISK_DIRECTORY}/${DOMAIN}/disk-${DISK_SIZE}.qcow2
                echo "Disk removed from $DOMAIN domain"
            fi
        done
    done
}

function snap-create {
    local snap_exists=0
    SNAP_NAME=$1

    if [[ -z $SNAP_NAME ]]; then
        echo -en "error: expected syntax: virtual-manage --snap-create <string>\n\n"
        exit 0
    fi

    # BEGIN without qemu-guest-agent
    # shutdown domains
    shutdown
    while read DOMAIN; do
        while read SNAP; do
            if [[ "$SNAP_NAME" = "$SNAP" ]]; then
                echo "Warning : snapshot $SNAP_NAME already exists on $DOMAIN"
                snap_exists=1
                break 2
            fi
        done <<< "$(list_all_snapshots $DOMAIN)"
    done <<< "$(list_inactive_domains)"

    if [[ $snap_exists -eq 1 ]]; then
        read -p "Snapshot $SNAP_NAME already exists. Recreate them (y/n) ?" -n 1 -r
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            snap-delete $SNAP_NAME
        else
            return
        fi
    fi

	list_inactive_domains | while read DOMAIN; do
        for node in $NODE_TYPES; do
            if [[ "$DOMAIN" =~ $node ]]; then
                virsh snapshot-create-as --domain $DOMAIN --name $SNAPSHOT_NAME --atomic | egrep -v "^$"
                echo "Snapshot $SNAPSHOT_NAME create for domain $DOMAIN"
            fi
        done
    done
    # start domains
    start
    # END without qemu-guest-agent

    # # BEGIN with qemu-guest-agent
    # while read DOMAIN; do
    #     while read SNAP; do
    #         if [[ "$SNAP_NAME" = "$SNAP" ]]; then
    #             echo "Warning : snapshot $SNAP_NAME already exists on $DOMAIN"
    #             snap_exists=1
    #             break 2
    #         fi
    #     done <<< "$(list_all_snapshots $DOMAIN)"
    # done <<< "$(list_running_domains)"

    # if [[ $snap_exists -eq 1 ]]; then
    #     read -p "Snapshot $SNAP_NAME already exists. Recreate them (y/n) ?" -n 1 -r
    #     if [[ $REPLY =~ ^[Yy]$ ]]; then
    #         snap-delete $SNAP_NAME
    #     else
    #         return
    #     fi
    # fi

	# list_running_domains | while read DOMAIN; do
    #     for node in $NODE_TYPES; do
    #         if [[ "$DOMAIN" =~ $node ]]; then
    #             virsh snapshot-create-as --domain $DOMAIN --name $SNAPSHOT_NAME --atomic --quiesce --disk-only | egrep -v "^$"
    #             echo "Snapshot $SNAPSHOT_NAME create for domain $DOMAIN"
    #         fi
    #     done
    # done
    # # END with qemu-guest-agent
}

function snap-delete {
    SNAP_NAME=$1

    if [[ -z $SNAP_NAME ]]; then
        echo -en "error: expected syntax: virtual-manage --snap-delete <string>\n\n"
        echo -en "snapshots:\n"
        snap-list
        exit 0
    fi
    shutdown
	list_inactive_domains | while read DOMAIN; do
        for node in $NODE_TYPES; do
            if [[ "$DOMAIN" =~ $node ]]; then
                virsh snapshot-delete $DOMAIN --snapshotname $SNAP_NAME
                echo "Snapshot $SNAPSHOT_NAME remove for domain $DOMAIN"
            fi
        done
    done
    # start
}

function snap-revert {
    SNAP_NAME=$1

    if [[ -z $SNAP_NAME ]]; then
        echo -en "error: expected syntax: virtual-manage --snap-revert <string>\n\n"
        echo -en "snapshots:\n"
        snap-list
        exit 0
    fi
    shutdown
	list_inactive_domains | while read DOMAIN; do
        for node in $NODE_TYPES; do
            if [[ "$DOMAIN" =~ $node ]]; then
                virsh snapshot-revert $DOMAIN --snapshotname $SNAP_NAME
                echo "Snapshot $SNAPSHOT_NAME revert for domain $DOMAIN"
            fi
        done
    done
    start
}

function snap-list {
	list_all_domains | while read DOMAIN; do
        for node in $NODE_TYPES; do
            if [[ "$DOMAIN" =~ $node ]]; then
                #                echo -e "\e[33m$DOMAIN [$(virsh snapshot-info $DOMAIN --current | grep Name | cut -d ":" -f2 | sed -e 's/^[ ]*//')]\e[0m"
                echo -e "$DOMAIN \e[92m\e[1m[$(virsh snapshot-current --name $DOMAIN)]\e[0m"
                virsh -q snapshot-list --tree --domain $DOMAIN 2>&1
            fi
        done
    done
}

function usage {
    cat <<EOF
Usage: $0 COMMAND

Commands:
    --all                            Start all defined Libvirt VMs
    --cleanup                        Cleanup (destroy & undefine) cluster
    --renew-dhcp                     Renew DHCP
    --restart                        Restart cluster
    --start                          Start cluster
    --shutdown                       Shutdown cluster
    --status                         Cluster status
    --snap-create <snapshot name>    Create cluster snapshot
    --snap-delete <snapshot name>    Delete cluster snapshot
    --snap-revert <snapshot name>    Revert cluster snapshot
    --snap-list                      List cluster snapshots

    --add-disk <disk size>           Add disk to VMs
    --remove-disk <disk size>        Remove disk from VMs
EOF
}

LONG_OPTS="all,renew-dhcp,cleanup,restart,start,shutdown,status,snap-delete:,snap-create:,snap-revert:,snap-list,add-disk:,remove-disk:,help"
ARGS=$(getopt -l "${LONG_OPTS}" --name "$0" -- "$@") || { usage >&2; exit 2; }

while [ "$#" -gt 0 ]; do
    case "$1" in
        (--all)
            ALL_VMS=1
            shift 1
            ;;
        (--cleanup)
            cleanup
            exit 0
            ;;
        (--restart)
            restart
            exit 0
            ;;
        (--renew-dhcp)
            renew-dhcp
            exit 0
            ;;
        (--start)
            start
            exit 0
            ;;
        (--shutdown)
            shutdown
            exit 0
            ;;
        (--status)
            status
            exit 0
            ;;
        (--snap-delete)
            SNAPSHOT_NAME=$2
            shift 2
            snap-delete $SNAPSHOT_NAME
            exit 0
            ;;
        (--add-disk)
            DISK_SIZE=$2
            shift 2
            add-disk
            exit 0
            ;;
        (--remove-disk)
            DISK_SIZE=$2
            shift 2
            remove-disk
            exit 0
            ;;
        (--snap-create)
            SNAPSHOT_NAME=$2
            shift 2
            snap-create $SNAPSHOT_NAME
            exit 0
            ;;
        (--snap-revert)
            SNAPSHOT_NAME=$2
            shift 2
            snap-revert $SNAPSHOT_NAME
            exit 0
            ;;
        (--snap-list)
            snap-list
            exit 0
            ;;
        (--help|-h)
            usage
            exit 0
            ;;
        (*)
            usage
            exit 3
            ;;
    esac
done
